# Script de diagnostic Backend Python pour Windows
# Usage: PowerShell -ExecutionPolicy Bypass -File diagnose-backend.ps1

Write-Host "üêç Diagnostic Backend Python - Anomalya Corp" -ForegroundColor Yellow
Write-Host "=============================================" -ForegroundColor Yellow

# 1. V√©rifier Python
Write-Host "`n1. üêç Installation Python:" -ForegroundColor Cyan
try {
    $pythonVersion = python --version 2>$null
    if ($pythonVersion) {
        Write-Host "   ‚úÖ Python install√©: $pythonVersion" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Python non trouv√© dans PATH" -ForegroundColor Red
    }
    
    $pipVersion = pip --version 2>$null
    if ($pipVersion) {
        Write-Host "   ‚úÖ pip disponible: $pipVersion" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå pip non trouv√©" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Erreur lors de la v√©rification Python: $_" -ForegroundColor Red
}

# 2. V√©rifier le r√©pertoire backend
Write-Host "`n2. üìÅ Structure Backend:" -ForegroundColor Cyan
if (Test-Path "backend") {
    Write-Host "   ‚úÖ Dossier backend trouv√©" -ForegroundColor Green
    
    $backendFiles = @("server.py", "requirements.txt", ".env")
    foreach ($file in $backendFiles) {
        $fullPath = "backend\$file"
        if (Test-Path $fullPath) {
            Write-Host "   ‚úÖ $file trouv√©" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå $file manquant" -ForegroundColor Red
        }
    }
} else {
    Write-Host "   ‚ùå Dossier backend non trouv√©!" -ForegroundColor Red
    Write-Host "   üí° Ex√©cutez ce script depuis la racine du projet anomalya-corp" -ForegroundColor Yellow
}

# 3. V√©rifier les d√©pendances Python
Write-Host "`n3. üì¶ D√©pendances Python:" -ForegroundColor Cyan
if (Test-Path "backend\requirements.txt") {
    Write-Host "   üìã Contenu requirements.txt:" -ForegroundColor White
    $requirements = Get-Content "backend\requirements.txt" | Select-Object -First 10
    foreach ($req in $requirements) {
        Write-Host "      $req" -ForegroundColor Gray
    }
    
    # Test d'installation des d√©pendances
    Write-Host "`n   üß™ Test des d√©pendances install√©es:" -ForegroundColor Cyan
    $testPackages = @("fastapi", "uvicorn", "pymongo", "python-jose", "passlib")
    foreach ($package in $testPackages) {
        try {
            $result = pip show $package 2>$null
            if ($result) {
                Write-Host "   ‚úÖ $package: Install√©" -ForegroundColor Green
            } else {
                Write-Host "   ‚ùå $package: Non install√©" -ForegroundColor Red
            }
        } catch {
            Write-Host "   ‚ùå $package: Erreur de v√©rification" -ForegroundColor Red
        }
    }
}

# 4. Test de d√©marrage backend
Write-Host "`n4. üöÄ Test de d√©marrage Backend:" -ForegroundColor Cyan
if (Test-Path "backend\server.py") {
    Write-Host "   üß™ Tentative de d√©marrage du backend (test rapide)..." -ForegroundColor Yellow
    
    try {
        Set-Location "backend"
        
        # Test d'import des modules principaux
        $importTest = python -c "
import sys
sys.path.append('.')
try:
    import fastapi
    print('‚úÖ FastAPI OK')
except ImportError as e:
    print(f'‚ùå FastAPI: {e}')
    
try:
    import uvicorn
    print('‚úÖ Uvicorn OK') 
except ImportError as e:
    print(f'‚ùå Uvicorn: {e}')
    
try:
    import pymongo
    print('‚úÖ PyMongo OK')
except ImportError as e:
    print(f'‚ùå PyMongo: {e}')
    
try:
    from server import app
    print('‚úÖ Server.py import OK')
except Exception as e:
    print(f'‚ùå Server.py: {e}')
" 2>&1
        
        Write-Host "   üìã R√©sultats des tests d'import:" -ForegroundColor White
        $importTest -split "`n" | ForEach-Object {
            if ($_ -match "‚úÖ") {
                Write-Host "      $_" -ForegroundColor Green
            } elseif ($_ -match "‚ùå") {
                Write-Host "      $_" -ForegroundColor Red
            } else {
                Write-Host "      $_" -ForegroundColor Gray
            }
        }
        
        Set-Location ".."
        
    } catch {
        Write-Host "   ‚ùå Erreur lors du test: $_" -ForegroundColor Red
        Set-Location ".."
    }
}

# 5. V√©rifier les logs/erreurs
Write-Host "`n5. üìã Recherche d'erreurs:" -ForegroundColor Cyan
$logFiles = @("backend\server.log", "backend\error.log", "backend\debug.log")
$logsFound = $false

foreach ($logFile in $logFiles) {
    if (Test-Path $logFile) {
        $logsFound = $true
        Write-Host "   üìÑ Log trouv√©: $logFile" -ForegroundColor Yellow
        $lastLines = Get-Content $logFile -Tail 5 -ErrorAction SilentlyContinue
        if ($lastLines) {
            Write-Host "   üìã Derni√®res lignes:" -ForegroundColor White
            $lastLines | ForEach-Object { Write-Host "      $_" -ForegroundColor Gray }
        }
    }
}

if (-not $logsFound) {
    Write-Host "   ‚ÑπÔ∏è Aucun fichier de log trouv√©" -ForegroundColor Gray
}

# Recommandations
Write-Host "`nüéØ Recommandations:" -ForegroundColor Yellow
Write-Host "===================" -ForegroundColor Yellow

$pythonVersion = python --version 2>$null
if (-not $pythonVersion) {
    Write-Host "‚ùó PRIORIT√â 1: Installer Python" -ForegroundColor Red
    Write-Host "   - T√©l√©chargez Python depuis python.org" -ForegroundColor White
    Write-Host "   - Ou via Chocolatey: choco install python" -ForegroundColor White
}

if (Test-Path "backend\requirements.txt") {
    Write-Host "‚ùó PRIORIT√â 2: Installer les d√©pendances Python" -ForegroundColor Red
    Write-Host "   cd backend" -ForegroundColor Gray
    Write-Host "   pip install -r requirements.txt" -ForegroundColor Gray
}

Write-Host "‚ùó PRIORIT√â 3: Test de d√©marrage manuel" -ForegroundColor Yellow
Write-Host "   cd backend" -ForegroundColor Gray
Write-Host "   python server.py" -ForegroundColor Gray
Write-Host "   (Regardez les messages d'erreur qui apparaissent)" -ForegroundColor Gray

Write-Host "`n‚úÖ Diagnostic backend termin√©" -ForegroundColor Green
Write-Host "üí° MongoDB fonctionne - Le probl√®me vient du backend Python" -ForegroundColor Cyan