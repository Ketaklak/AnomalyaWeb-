#!/bin/bash
# Installation rapide d'Anomalya Corp (sans d√©pendances syst√®me)
# Version: 2.1.0 (Mai 2025) - Support complet de la gestion utilisateurs unifi√©e avec pagination
# Usage: bash quick-install.sh

# Obtenir le r√©pertoire du script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Messages format√©s
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

echo -e "${BLUE}üöÄ Installation Rapide d'Anomalya Corp${NC}"
echo "========================================="

# V√©rifier si nous sommes dans le bon r√©pertoire
if [[ ! -f "$PROJECT_DIR/backend/server.py" ]] || [[ ! -f "$PROJECT_DIR/frontend/package.json" ]]; then
    error "Le script doit √™tre lanc√© depuis le r√©pertoire racine du projet Anomalya Corp"
    error "Structure attendue: anomalya-corp/scripts/quick-install.sh"
    exit 1
fi

info "R√©pertoire du projet d√©tect√©: $PROJECT_DIR"

# V√©rifier les pr√©requis
check_requirements() {
    info "V√©rification des pr√©requis..."
    
    # V√©rifier Python
    if ! command -v python3 &> /dev/null; then
        error "Python 3 n'est pas install√©. Veuillez l'installer d'abord."
        echo "  Ubuntu/Debian: sudo apt install python3 python3-pip"
        echo "  CentOS/Fedora: sudo dnf install python3 python3-pip"
        exit 1
    else
        success "Python 3 trouv√©: $(python3 --version)"
    fi
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        error "Node.js n'est pas install√©. Veuillez l'installer d'abord."
        echo "  T√©l√©chargez depuis: https://nodejs.org/"
        exit 1
    else
        success "Node.js trouv√©: $(node --version)"
    fi
    
    # V√©rifier npm/yarn
    if command -v yarn &> /dev/null; then
        success "Yarn trouv√©: $(yarn --version)"
        PACKAGE_MANAGER="yarn"
    elif command -v npm &> /dev/null; then
        success "npm trouv√©: $(npm --version)"
        PACKAGE_MANAGER="npm"
    else
        error "Ni yarn ni npm n'est install√©. Veuillez installer Node.js complet."
        exit 1
    fi
}

# Installation des d√©pendances backend
setup_backend() {
    info "Configuration du backend..."
    cd "$PROJECT_DIR/backend" || exit 1
    
    # Cr√©er un environnement virtuel si il n'existe pas
    if [[ ! -d "venv" ]]; then
        info "Cr√©ation de l'environnement virtuel Python..."
        python3 -m venv venv
    fi
    
    # Activer l'environnement virtuel
    source venv/bin/activate
    
    # Installer les d√©pendances
    info "Installation des d√©pendances Python..."
    pip install --upgrade pip
    pip install -r requirements.txt
    
    # Cr√©er le fichier .env si il n'existe pas
    if [[ ! -f ".env" ]] && [[ -f ".env.example" ]]; then
        info "Cr√©ation du fichier .env backend..."
        cp .env.example .env
    fi
    
    success "Backend configur√© avec succ√®s"
}

# Installation des d√©pendances frontend
setup_frontend() {
    info "Configuration du frontend..."
    cd "$PROJECT_DIR/frontend" || exit 1
    
    # Installer les d√©pendances
    info "Installation des d√©pendances Node.js..."
    if [[ "$PACKAGE_MANAGER" == "yarn" ]]; then
        yarn install
    else
        npm install
    fi
    
    # Cr√©er le fichier .env si il n'existe pas
    if [[ ! -f ".env" ]] && [[ -f ".env.example" ]]; then
        info "Cr√©ation du fichier .env frontend..."
        cp .env.example .env
    fi
    
    success "Frontend configur√© avec succ√®s"
}

# Instructions de d√©marrage
show_instructions() {
    echo ""
    success "üéâ Installation termin√©e avec succ√®s!"
    echo ""
    info "Pour d√©marrer l'application:"
    echo ""
    echo -e "${YELLOW}1. Terminal Backend (dans une nouvelle fen√™tre):${NC}"
    echo "   cd $PROJECT_DIR/backend"
    echo "   source venv/bin/activate"
    echo "   python server.py"
    echo ""
    echo -e "${YELLOW}2. Terminal Frontend (dans une nouvelle fen√™tre):${NC}"
    echo "   cd $PROJECT_DIR/frontend"
    if [[ "$PACKAGE_MANAGER" == "yarn" ]]; then
        echo "   yarn start"
    else
        echo "   npm start"
    fi
    echo ""
    echo -e "${GREEN}3. Acc√©der √† l'application:${NC}"
    echo "   Frontend: http://localhost:3000"
    echo "   Backend API: http://localhost:8001"
    echo "   Admin: admin / admin123"
    echo ""
    warning "Note: Si MongoDB n'est pas install√©, certaines fonctionnalit√©s peuvent ne pas marcher."
    info "Installation compl√®te disponible avec: ./scripts/install-linux.sh"
}

# Ex√©cution principale
main() {
    check_requirements
    setup_backend
    setup_frontend
    show_instructions
}

# Lancer l'installation
main