# Script de correction Backend Python pour Windows
# Usage: PowerShell -ExecutionPolicy Bypass -File fix-backend.ps1

Write-Host "üîß Correction Backend Python - Anomalya Corp" -ForegroundColor Yellow
Write-Host "============================================" -ForegroundColor Yellow

# 1. V√©rifier et corriger Python
Write-Host "`n1. üêç V√©rification Python:" -ForegroundColor Cyan

try {
    $pythonVersion = python --version 2>$null
    if ($pythonVersion) {
        Write-Host "   ‚úÖ Python trouv√©: $pythonVersion" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Python non trouv√©. Installation n√©cessaire..." -ForegroundColor Red
        
        if (Get-Command choco -ErrorAction SilentlyContinue) {
            Write-Host "   üì¶ Installation Python via Chocolatey..." -ForegroundColor Yellow
            choco install python -y
            refreshenv
        } else {
            Write-Host "   üí° Veuillez installer Python manuellement:" -ForegroundColor Yellow
            Write-Host "      - https://www.python.org/downloads/" -ForegroundColor Gray
            Write-Host "      - Cochez 'Add Python to PATH' durant l'installation" -ForegroundColor Gray
            return
        }
    }
} catch {
    Write-Host "   ‚ùå Erreur Python: $_" -ForegroundColor Red
    return
}

# 2. Aller dans le dossier backend
if (-not (Test-Path "backend")) {
    Write-Host "`n‚ùå Dossier 'backend' non trouv√©!" -ForegroundColor Red
    Write-Host "üí° Ex√©cutez ce script depuis la racine du projet anomalya-corp" -ForegroundColor Yellow
    return
}

Set-Location "backend"
Write-Host "`n2. üìÅ Positionnement dans /backend" -ForegroundColor Cyan

# 3. Installer les d√©pendances
Write-Host "`n3. üì¶ Installation des d√©pendances Python..." -ForegroundColor Cyan

if (Test-Path "requirements.txt") {
    Write-Host "   üìã Installation depuis requirements.txt..." -ForegroundColor Yellow
    
    try {
        # Mise √† jour pip d'abord
        Write-Host "   üîÑ Mise √† jour pip..." -ForegroundColor Gray
        python -m pip install --upgrade pip 2>$null
        
        # Installation des d√©pendances
        Write-Host "   üì¶ Installation des packages..." -ForegroundColor Gray
        $installResult = python -m pip install -r requirements.txt 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ D√©pendances install√©es avec succ√®s!" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è Installation avec des warnings:" -ForegroundColor Yellow
            Write-Host "      $installResult" -ForegroundColor Gray
        }
        
    } catch {
        Write-Host "   ‚ùå Erreur installation: $_" -ForegroundColor Red
        Write-Host "   üí° Essayez manuellement: cd backend && pip install -r requirements.txt" -ForegroundColor Yellow
    }
    
} else {
    Write-Host "   ‚ùå requirements.txt non trouv√©!" -ForegroundColor Red
}

# 4. V√©rifier le fichier .env
Write-Host "`n4. ‚öôÔ∏è V√©rification configuration (.env):" -ForegroundColor Cyan

if (Test-Path ".env") {
    Write-Host "   ‚úÖ Fichier .env trouv√©" -ForegroundColor Green
    
    # V√©rifier les variables importantes
    $envContent = Get-Content ".env"
    $mongoUrl = $envContent | Where-Object { $_ -like "MONGO_URL*" }
    $secretKey = $envContent | Where-Object { $_ -like "SECRET_KEY*" }
    
    if ($mongoUrl -and $mongoUrl -match "mongodb://localhost:27017") {
        Write-Host "   ‚úÖ MONGO_URL correcte" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è MONGO_URL peut-√™tre incorrecte" -ForegroundColor Yellow
    }
    
    if ($secretKey -and $secretKey.Length -gt 20) {
        Write-Host "   ‚úÖ SECRET_KEY configur√©e" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è SECRET_KEY faible ou manquante" -ForegroundColor Yellow
    }
    
} else {
    Write-Host "   ‚ö†Ô∏è Fichier .env manquant. Cr√©ation depuis .env.example..." -ForegroundColor Yellow
    
    if (Test-Path ".env.example") {
        Copy-Item ".env.example" ".env"
        Write-Host "   ‚úÖ Fichier .env cr√©√© depuis .env.example" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå .env.example aussi manquant!" -ForegroundColor Red
    }
}

# 5. Test de d√©marrage du backend
Write-Host "`n5. üöÄ Test de d√©marrage Backend:" -ForegroundColor Cyan

try {
    Write-Host "   üß™ Test d'import des modules critiques..." -ForegroundColor Yellow
    
    $testScript = @"
import sys
import os

# Test des imports principaux
try:
    import fastapi
    print('‚úÖ FastAPI: OK')
except Exception as e:
    print(f'‚ùå FastAPI: {e}')

try:
    import uvicorn
    print('‚úÖ Uvicorn: OK') 
except Exception as e:
    print(f'‚ùå Uvicorn: {e}')

try:
    import pymongo
    print('‚úÖ PyMongo: OK')
except Exception as e:
    print(f'‚ùå PyMongo: {e}')

try:
    from pymongo import MongoClient
    client = MongoClient('mongodb://localhost:27017')
    client.admin.command('ping')
    print('‚úÖ MongoDB Connection: OK')
    client.close()
except Exception as e:
    print(f'‚ùå MongoDB Connection: {e}')

# Test import du serveur
try:
    import server
    print('‚úÖ Server Import: OK')
except Exception as e:
    print(f'‚ùå Server Import: {e}')
"@
    
    $testResult = python -c $testScript 2>&1
    
    Write-Host "   üìã R√©sultats:" -ForegroundColor White
    $testResult -split "`n" | ForEach-Object {
        if ($_ -match "‚úÖ") {
            Write-Host "      $_" -ForegroundColor Green
        } elseif ($_ -match "‚ùå") {
            Write-Host "      $_" -ForegroundColor Red
        } else {
            Write-Host "      $_" -ForegroundColor Gray
        }
    }
    
} catch {
    Write-Host "   ‚ùå Erreur lors du test: $_" -ForegroundColor Red
}

# 6. Tentative de d√©marrage r√©el
Write-Host "`n6. üéØ D√©marrage du serveur (test 10 secondes):" -ForegroundColor Cyan

try {
    Write-Host "   üöÄ Lancement du serveur backend..." -ForegroundColor Yellow
    Write-Host "   (Appuyez sur Ctrl+C pour arr√™ter le test)" -ForegroundColor Gray
    
    # D√©marrer le serveur en arri√®re-plan pour test
    $job = Start-Job -ScriptBlock {
        Set-Location $args[0]
        python server.py
    } -ArgumentList (Get-Location)
    
    # Attendre 5 secondes
    Start-Sleep -Seconds 5
    
    # Tester la connectivit√©
    try {
        $connection = Test-NetConnection -ComputerName "localhost" -Port 8001 -InformationLevel Quiet -WarningAction SilentlyContinue
        if ($connection) {
            Write-Host "   ‚úÖ Backend accessible sur port 8001!" -ForegroundColor Green
            Write-Host "   üéâ SUCCESS: Backend fonctionne correctement!" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå Backend non accessible sur port 8001" -ForegroundColor Red
        }
    } catch {
        Write-Host "   ‚ùå Test de connectivit√© √©chou√©" -ForegroundColor Red
    }
    
    # Arr√™ter le job de test
    Stop-Job $job -Force
    Remove-Job $job -Force
    
} catch {
    Write-Host "   ‚ùå Erreur d√©marrage: $_" -ForegroundColor Red
}

# Retourner √† la racine
Set-Location ".."

# Recommandations finales
Write-Host "`nüéØ Prochaines √©tapes:" -ForegroundColor Yellow
Write-Host "====================" -ForegroundColor Yellow

Write-Host "‚úÖ Pour d√©marrer le backend manuellement:" -ForegroundColor Green
Write-Host "   cd backend" -ForegroundColor Gray
Write-Host "   python server.py" -ForegroundColor Gray

Write-Host "`n‚úÖ Pour d√©marrer l'application compl√®te:" -ForegroundColor Green
Write-Host "   1. Terminal 1 - Backend:" -ForegroundColor Gray
Write-Host "      cd backend && python server.py" -ForegroundColor Gray
Write-Host "   2. Terminal 2 - Frontend:" -ForegroundColor Gray  
Write-Host "      cd frontend && npm start" -ForegroundColor Gray
Write-Host "   3. Ouvrir: http://localhost:3000" -ForegroundColor Gray

Write-Host "`nüîç Si probl√®mes persistent:" -ForegroundColor Cyan
Write-Host "   .\diagnose-backend.ps1" -ForegroundColor Gray

Write-Host "`n‚úÖ Script de correction termin√©!" -ForegroundColor Green